# -*- coding: utf-8 -*-
"""AnalyzingtheDataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fHHgYPwgOlrAkXv4Q5ut6YMvExFFN-WZ
"""

import pandas as pd
import numpy as np
from scipy.stats import gmean
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
import plotly.express as px

# Upload and Display
columns = [
    "Q-E", "ZN-E", "PH-E", "DBO-E", "DQO-E", "SS-E", "SSV-E", "SED-E", "COND-E",
    "PH-P", "DBO-P", "SS-P", "SSV-P", "SED-P", "COND-P",
    "PH-D", "DBO-D", "DQO-D", "SS-D", "SSV-D", "SED-D", "COND-D",
    "PH-S", "DBO-S", "DQO-S", "SS-S", "SSV-S", "SED-S", "COND-S",
    "RD-DBO-P", "RD-SS-P", "RD-SED-P", "RD-DBO-S", "RD-DQO-S",
    "RD-DBO-G", "RD-DQO-G", "RD-SS-G", "RD-SED-G"
]
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/water-treatment/water-treatment.data"
df = pd.read_csv(url, names=columns, na_values=["?"])
df.head()

# Missing Data Summary
print(" Dataset Shape ")
print(df.shape)

print("\n Missing Values per Column ")
print(df.isnull().sum()[df.isnull().sum() > 0])

print("\n Missing Data Percentage ")
print((df.isnull().sum() / len(df) * 100).sort_values(ascending=False))

# Missing Data Visualization
plt.figure(figsize=(12, 6))
msno.bar(df, color='steelblue')
plt.title("Missing Values per Feature", fontsize=14)
plt.show()

plt.figure(figsize=(12, 6))
msno.matrix(df, sparkline=False)
plt.title("Missing Data Matrix", fontsize=14)
plt.show()

plt.figure(figsize=(12, 6))
msno.heatmap(df)
plt.title("Missing Data Correlation Heatmap", fontsize=14)
plt.show()

plt.figure(figsize=(14, 6))
sns.heatmap(df.isnull(), cbar=False, cmap="viridis")
plt.title("Missing Data Pattern (Seaborn Heatmap)", fontsize=14)
plt.xlabel("Features")
plt.ylabel("Samples")
plt.show()

print("\n Basic Stats ")
print(df.describe())

mean_vals = df.mean(numeric_only=True)
median_vals = df.median(numeric_only=True)
mode_vals = df.mode(numeric_only=True).iloc[0]
min_vals = df.min(numeric_only=True)
max_vals = df.max(numeric_only=True)
range_vals = max_vals - min_vals
var_vals = df.var(numeric_only=True)
std_vals = df.std(numeric_only=True)
geom_mean_vals = df.apply(
    lambda col: gmean(col.dropna()) if np.all(col.dropna() > 0) else np.nan,
    axis=0
)

summary_df = pd.DataFrame({
    "Count": df.count(numeric_only=True),
    "Mean": mean_vals,
    "Median": median_vals,
    "Mode": mode_vals,
    "Min": min_vals,
    "Max": max_vals,
    "Range": range_vals,
    "Variance": var_vals,
    "Std Dev": std_vals,
    "Geometric Mean": geom_mean_vals
})

print("\n Summary Table ")
print(summary_df)

# Scaled boxplots
scaler = StandardScaler()
scaled_df = pd.DataFrame(
    scaler.fit_transform(df.select_dtypes(include=[np.number])),
    columns=df.select_dtypes(include=[np.number]).columns)

plt.figure(figsize=(20, 10))
sns.boxplot(data=scaled_df, orient="h", palette="Set2")
plt.title("Box Plots (Standardized)", fontsize=16)
plt.xlabel("Standardized Value (Z-score)")
plt.ylabel("Feature")
plt.tight_layout()
plt.show()

# Histograms
df_long = df.melt(value_vars=df.select_dtypes(include='number').columns)
g = sns.FacetGrid(df_long, col="variable", col_wrap=4, sharex=False, sharey=False, height=3)
g.map(sns.histplot, "value", kde=True, color="skyblue", edgecolor="black")
g.set_titles("{col_name}")
plt.subplots_adjust(top=0.9)
g.fig.suptitle("Histograms with KDE for All Features", fontsize=16)
plt.show()

# Process Monitoring Display
numeric_cols = df.select_dtypes(include=[np.number]).columns
fig, axes = plt.subplots(len(numeric_cols), 2, figsize=(12, len(numeric_cols)*2.5))
fig.suptitle("Process Monitoring Charts for All Features", fontsize=18, y=1.02)

for i, col in enumerate(numeric_cols):
    series = df[col].dropna()
    mean_val = series.mean()
    std_val = series.std()
    ucl = mean_val + 3*std_val
    lcl = mean_val - 3*std_val

    # Time-series with control limits
    ax1 = axes[i, 0]
    ax1.plot(series.index, series, marker='o', markersize=3, linestyle='-', label='Value')
    ax1.axhline(mean_val, color='green', linestyle='--', label='Mean')
    ax1.axhline(ucl, color='red', linestyle='--', label='+3σ')
    ax1.axhline(lcl, color='red', linestyle='--', label='-3σ')
    ax1.set_title(f"{col} - Time Series & Control Limits")
    ax1.set_ylabel(col)
    ax1.legend(loc='upper right', fontsize=6)

    # Histogram
    ax2 = axes[i, 1]
    sns.histplot(series, kde=True, bins=20, color="skyblue", edgecolor="black", ax=ax2)
    ax2.set_title(f"{col} - Distribution")
    ax2.set_xlabel(col)

plt.tight_layout()
plt.show()

# Correlation Matrix
corr = numeric_df.corr()

plt.figure(figsize=(22, 18))
sns.heatmap(
    corr,
    annot=True,
    fmt=".2f",
    cmap="coolwarm",
    annot_kws={"size": 6},
    cbar_kws={"shrink": 0.5}
)
plt.xticks(rotation=90, fontsize=8)
plt.yticks(rotation=0, fontsize=8)
plt.title("Correlation Matrix - All Features", fontsize=16)
plt.tight_layout()
plt.show()

# PairPlot
sns.pairplot(numeric_df, plot_kws={'s': 10, 'alpha': 0.6})
plt.suptitle("Pair Plot - All Features (Sampled Rows)", y=1.02)
plt.show()

import plotly.express as px

# Limit number of dimensions per matrix page
max_dims_per_page = 8
columns = numeric_df.columns.tolist()

# Split into chunks of 8 features per matrix
for i in range(0, len(columns), max_dims_per_page):
    subset = columns[i:i + max_dims_per_page]
    fig = px.scatter_matrix(
        numeric_df,
        dimensions=subset,
        title=f"Scatter Matrix - Features {i+1} to {i+len(subset)}",
        height=900,
        width=900
    )
    fig.update_traces(diagonal_visible=True, marker=dict(size=3, opacity=0.6))
    fig.show()