# -*- coding: utf-8 -*-
"""Sampling_DemonstratingCLT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fj4hqMVTkhALHJ5TLdfdpUvo5QTnOMOE
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load full dataset
columns = [
    "Q-E", "ZN-E", "PH-E", "DBO-E", "DQO-E", "SS-E", "SSV-E", "SED-E", "COND-E",
    "PH-P", "DBO-P", "SS-P", "SSV-P", "SED-P", "COND-P",
    "PH-D", "DBO-D", "DQO-D", "SS-D", "SSV-D", "SED-D", "COND-D",
    "PH-S", "DBO-S", "DQO-S", "SS-S", "SSV-S", "SED-S", "COND-S",
    "RD-DBO-P", "RD-SS-P", "RD-SED-P", "RD-DBO-S", "RD-DQO-S",
    "RD-DBO-G", "RD-DQO-G", "RD-SS-G", "RD-SED-G"
]
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/water-treatment/water-treatment.data"
df = pd.read_csv(url, names=columns, na_values=["?"])

# Simple Random Sampling
simple_sample = df.sample(n=100, random_state=42)

# Stratified Sampling based on the 'PH-E' column
stratified_sample = df.groupby('PH-E', group_keys=False, observed=False).apply(
    lambda x: x.sample(int(np.rint(0.1 * len(x))))
)


# Display sample heads
print("Simple Random Sample")
print(simple_sample.head())

print("\n Stratified Sample")
print(stratified_sample.head())

# Proportion Comparison of PH-E
print("\n Proportion of PH-E:")
print("Full Dataset:")
print(df["PH-E"].value_counts(normalize=True))
print("\nSimple Sample:")
print(simple_sample["PH-E"].value_counts(normalize=True))
print("\nStratified Sample:")
print(stratified_sample["PH-E"].value_counts(normalize=True))

# Visual Comparison: PH-E
plt.figure(figsize=(21, 6))

plt.subplot(1, 3, 1)
sns.countplot(x="PH-E", data=df)
plt.title("Full Dataset Distribution")

plt.subplot(1, 3, 2)
sns.countplot(x="PH-E", data=simple_sample)
plt.title("Simple Random Sample Distribution")

plt.subplot(1, 3, 3)
sns.countplot(x="PH-E", data=stratified_sample)
plt.title("Stratified Sample Distribution")

plt.tight_layout()
plt.show()

# Visual Comparison: PH-E Histograms
plt.figure(figsize=(21, 6))

plt.subplot(1, 3, 1)
sns.histplot(df["PH-E"], kde=True, color="gray")
plt.title("PH-E Distribution — Full Dataset")

plt.subplot(1, 3, 2)
sns.histplot(simple_sample["PH-E"], kde=True, color="blue")
plt.title("PH-E Distribution — Simple Sample")

plt.subplot(1, 3, 3)
sns.histplot(stratified_sample["PH-E"], kde=True, color="green")
plt.title("PH-E Distribution — Stratified Sample")

plt.tight_layout()
plt.show()

# Function to generate sample means
def get_sample_means(series, sample_size, repeats=1000):
    """Return a list of sample means from repeated random sampling."""
    return [series.sample(n=sample_size).mean() for _ in range(repeats)]

# Parameters
variables     = ["SS-S", "SS-E"]   # Columns to analyse
sample_sizes  = [30, 100]         # Sample sizes to test
n_repeats     = 1000              # Number of repeated samples

summary_stats = []                # Store summary statistics
sample_means  = {}                 # Store sampling distributions

# Main loop
for var in variables:
    data = df[var].dropna()
    sample_means[var] = {}

    # Full dataset stats
    summary_stats.append({
        "Variable": var,
        "Dataset": "Full Data",
        "Mean": data.mean(),
        "Std Dev": data.std()
    })

    # Sampling distributions
    for n in sample_sizes:
        means = get_sample_means(data, n, n_repeats)
        sample_means[var][n] = means

        summary_stats.append({
            "Variable": var,
            "Dataset": f"Sample Means (n={n})",
            "Mean": np.mean(means),
            "Std Dev": np.std(means)
        })

# Plotting
fig, axes = plt.subplots(
    nrows=len(variables),
    ncols=len(sample_sizes) + 1,
    figsize=(5 * (len(sample_sizes) + 1), 5 * len(variables))
)

for row, var in enumerate(variables):
    data = df[var].dropna()

    # Original data distribution
    sns.histplot(data, kde=True, color="gray", ax=axes[row, 0])
    axes[row, 0].axvline(data.mean(), color='red', linestyle='--', label='Population Mean')
    axes[row, 0].set_title(f"Original {var}")
    axes[row, 0].set_xlabel(var)
    axes[row, 0].set_ylabel("Frequency")
    axes[row, 0].legend()

    # Sampling distributions
    for col, n in enumerate(sample_sizes, start=1):
        sns.histplot(sample_means[var][n], kde=True, color="skyblue", ax=axes[row, col])
        axes[row, col].axvline(data.mean(), color='red', linestyle='--', label='Population Mean')
        axes[row, col].set_title(f"{var} — Sample Means (n={n})")
        axes[row, col].set_xlabel("Sample Mean")
        axes[row, col].set_ylabel("Frequency")
        axes[row, col].legend()

plt.tight_layout()
plt.show()

# Summary table
summary_df = pd.DataFrame(summary_stats)
print("\nSummary Statistics:")
print(summary_df.to_string(index=False))